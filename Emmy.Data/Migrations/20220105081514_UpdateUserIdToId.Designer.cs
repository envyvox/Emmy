// <auto-generated />
using System;
using Emmy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Emmy.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220105081514_UpdateUserIdToId")]
    partial class UpdateUserIdToId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Emmy.Data.Entities.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<byte>("Rarity")
                        .HasColumnType("smallint")
                        .HasColumnName("rarity");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_banners");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_banners_name");

                    b.ToTable("banners");
                });

            modelBuilder.Entity("Emmy.Data.Entities.Discord.ContentMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_content_messages");

                    b.HasIndex("UserId", "ChannelId", "MessageId")
                        .HasDatabaseName("ix_content_messages_user_id_channel_id_message_id");

                    b.ToTable("content_messages");
                });

            modelBuilder.Entity("Emmy.Data.Entities.Discord.ContentVote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_message_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<byte>("Vote")
                        .HasColumnType("smallint")
                        .HasColumnName("vote");

                    b.HasKey("Id")
                        .HasName("pk_content_votes");

                    b.HasIndex("ContentMessageId")
                        .HasDatabaseName("ix_content_votes_content_message_id");

                    b.HasIndex("UserId", "ContentMessageId", "Vote")
                        .HasDatabaseName("ix_content_votes_user_id_content_message_id_vote");

                    b.ToTable("content_votes");
                });

            modelBuilder.Entity("Emmy.Data.Entities.Discord.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_user_id_role_id");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Emmy.Data.Entities.Discord.UserVoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_voices");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_voices_user_id");

                    b.ToTable("user_voices");
                });

            modelBuilder.Entity("Emmy.Data.Entities.User.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<string>("CommandColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Cube")
                        .HasColumnType("smallint")
                        .HasColumnName("cube");

                    b.Property<byte>("Fraction")
                        .HasColumnType("smallint")
                        .HasColumnName("fraction");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<long>("Level")
                        .HasColumnType("bigint")
                        .HasColumnName("level");

                    b.Property<byte>("Location")
                        .HasColumnType("smallint")
                        .HasColumnName("location");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint")
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Emmy.Data.Entities.User.UserBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uuid")
                        .HasColumnName("banner_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_banners");

                    b.HasIndex("BannerId")
                        .HasDatabaseName("ix_user_banners_banner_id");

                    b.HasIndex("UserId", "BannerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_banners_user_id_banner_id");

                    b.ToTable("user_banners");
                });

            modelBuilder.Entity("Emmy.Data.Entities.User.UserCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_currencies");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_currencies_user_id_type");

                    b.ToTable("user_currencies");
                });

            modelBuilder.Entity("Emmy.Data.Entities.User.UserStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_statistics");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_statistics_user_id_type");

                    b.ToTable("user_statistics");
                });

            modelBuilder.Entity("Emmy.Data.Entities.WorldProperty", b =>
                {
                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Type")
                        .HasName("pk_world_properties");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_world_properties_type");

                    b.ToTable("world_properties");
                });

            modelBuilder.Entity("Emmy.Data.Entities.WorldState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("CurrentSeason")
                        .HasColumnType("smallint")
                        .HasColumnName("current_season");

                    b.Property<byte>("WeatherToday")
                        .HasColumnType("smallint")
                        .HasColumnName("weather_today");

                    b.Property<byte>("WeatherTomorrow")
                        .HasColumnType("smallint")
                        .HasColumnName("weather_tomorrow");

                    b.HasKey("Id")
                        .HasName("pk_world_states");

                    b.ToTable("world_states");
                });

            modelBuilder.Entity("Emmy.Data.Entities.Discord.ContentMessage", b =>
                {
                    b.HasOne("Emmy.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_content_messages_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emmy.Data.Entities.Discord.ContentVote", b =>
                {
                    b.HasOne("Emmy.Data.Entities.Discord.ContentMessage", "ContentMessage")
                        .WithMany()
                        .HasForeignKey("ContentMessageId")
                        .HasConstraintName("fk_content_votes_content_messages_content_message_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emmy.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_content_votes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emmy.Data.Entities.Discord.UserRole", b =>
                {
                    b.HasOne("Emmy.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emmy.Data.Entities.Discord.UserVoice", b =>
                {
                    b.HasOne("Emmy.Data.Entities.User.User", "User")
                        .WithOne()
                        .HasForeignKey("Emmy.Data.Entities.Discord.UserVoice", "UserId")
                        .HasConstraintName("fk_user_voices_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emmy.Data.Entities.User.UserBanner", b =>
                {
                    b.HasOne("Emmy.Data.Entities.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .HasConstraintName("fk_user_banners_banners_banner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emmy.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_banners_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emmy.Data.Entities.User.UserCurrency", b =>
                {
                    b.HasOne("Emmy.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_currencies_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emmy.Data.Entities.User.UserStatistic", b =>
                {
                    b.HasOne("Emmy.Data.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_statistics_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
